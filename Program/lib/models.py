from joblib import load
import pefile
import vt
import hashlib
import warnings
from .classes import Engine
from .funcs import read_engines
import pickle
from itertools import chain, repeat, islice

def bitmap_model(file, imports):
    bitmap = ''
    try:
        dlls = set()
        pe = pefile.PE(file, fast_load = True)
        pe.parse_data_directories()
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            dlls.add(entry.dll.decode().lower())
    except:
        return 'Blacklist'

    for dll in imports:
        if dll in dlls:
            bitmap += '1'
        else:
            bitmap += '0'

    clf = load('../data/av-model.joblib')
    return(clf.predict([list(bitmap)])[0])

def virustotal_model(file, imports):
    engines = {}
    weights = {}

    (engines, weights) = read_engines(engines, weights)

    weights = dict(sorted(weights.items(), key=lambda item: item[1], reverse=True))

    client = vt.Client('950e1057f624467f76a69595e09ad8fe75bb17415c3b2b803c816862bec92297')
    op = 0
    BUF_SIZE = 65536
    md5 = hashlib.md5()
    scanned = True

    # results = client.get_object("/files/" + sha256(file))
    # print(results)
    # return 0

    with open(file, 'rb') as fp:
        while True:
            data = fp.read(BUF_SIZE)
            if not data:
                break
            md5.update(data)

        try:
            file_obj = client.get_object("/files/" + md5.hexdigest())
            if file_obj and file_obj.last_analysis_results:
                results = file_obj.last_analysis_results
            else:
                scanned = False
        except vt.error.APIError as e:
            if e.code == 'NotFoundError':
                scanned = False
                pass
            elif e.code == 'QuotaExceededError':
                print('VirusTotal API Quota Exceeded. Returning.')
                client.close()
                return None
            else:
                print(e.code)
                client.close()
                return None

        if not scanned:
            fp.seek(0, 0)
            try:
                results = client.scan_file(fp, wait_for_completion=True).results
            except vt.error.APIError:
                print('VirusTotal API Quota Exceeded. Returning.')
                client.close()
                return None

    for engine in results:
        category = results[engine]['category']
        if category == 'confirmed-timeout' or category == 'type-unsupported':
            continue
        if category == 'malicious' or category == 'suspicious':
            op = op - weights[engine]
        elif category == 'undetected' or category == 'harmless':
            op = op + weights[engine]

    client.close()

    if op < 0:
        return 'Blacklist'
    elif op > 0:
        return 'Whitelist'
    else:
        return 'Unknown'

def binary_model(file, imports):
    with open(file, 'rb') as f:
        data = f.read()
        data = list(data)
        maxX = 200000
        if len(data) > maxX:
            input = data[:maxX]
        else:
            data = islice(chain(data, repeat(int(0))), maxX)
            input = list(data)

        warnings.simplefilter("ignore")
        RFmodel = pickle.load(open('data/RFC.sav', 'rb'))

    return RFmodel.predict([input])[0]
