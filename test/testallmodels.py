from cProfile import label
import os
import csv
import json
from xml.dom.pulldom import default_bufsize
from joblib import load
import pefile
import vt
import hashlib
import warnings
import pickle
from itertools import chain, repeat, islice
from collections import defaultdict
from sklearn.metrics import accuracy_score

def load_imports():
    imports = list()
    with open(f'../Program/data/imports.txt') as f:
        for dll in f:
            imports.append(dll.rstrip())

    return imports

def bitmap_model(file, imports):
    bitmap = ''
    try:
        dlls = set()
        pe = pefile.PE(file, fast_load = True)
        pe.parse_data_directories()
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            dlls.add(entry.dll.decode().lower())
    except:
        return 'Blacklist'

    for dll in imports:
        if dll in dlls:
            bitmap += '1'
        else:
            bitmap += '0'

    clf = load('../data/av-model.joblib')
    return(clf.predict([list(bitmap)])[0])

def main():
    files = dict()
    imports = load_imports()

    file_data = open('../malware/test.csv', 'r')
    reader = csv.reader(file_data)
    t = defaultdict(str)
    for row in reader:
        t[str(row[0])] = str(row[6])
    
    # Initialize
    counter = 1
    files = os.listdir('../malware/test')
    total = len(files)
    
    labelDict = defaultdict(list)

    # Add bitmap model
    for file in files:
        print(f'Bitmap: {counter}/{total}')
        counter += 1
        labelDict[file].append(bitmap_model(f'../malware/test/{file}', imports))

    # Add binary model
    """counter = 1
    for file in files:
        print(f'Binary: {counter}/{total}')
        counter += 1
        with open(f'../malware/test/{file}', 'rb') as f:
                data = f.read()
                data = list(data)
                maxX = 200000
                if len(data) > maxX:
                    input = data[:maxX]
                else:
                    data = islice(chain(data, repeat(int(0))), maxX)
                    input = list(data)

        # Disables a "Version Depreciation User Warning" that we could not figure out how to fix...
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            RFmodel = pickle.load(open('RFC.sav', 'rb'))

        labelDict[file].append(RFmodel.predict([input])[0])"""
    with open('results.txt', 'r') as f:
        for number, line in enumerate(f):
            line = line.rstrip().split(':')
            labelDict[line[0]].append(line[1])

    # Add vt model - FIND WHERE HE KEEPS SCORES
    with open('../vt/tests.txt') as f:
        for line in f:
            line = line.rstrip().split(' ')
            file = line[0]
            decision = line[3]
            if file in labelDict.keys():
                labelDict[file].append('Blacklist') if decision == 'MALICIOUS' else labelDict[file].append('Whitelist')
    print(labelDict)
    predictions = list()
    labels = list()

    counter = 0

    for file in labelDict:
        r1 = labelDict[file][0]
        r2 = labelDict[file][1]
        r3 = labelDict[file][2]
        
        rs1 = 0 if r1 == 'Blacklist' else 1
        rs2 = 0 if r2 == 'Blacklist' else 1
        rs3 = 0 if r3 == 'Blacklist' else 1
        predictions.append('Blacklist') if sum([rs1, rs2, rs3]) / 3 < 1.5 else predictions.append('Whitelist')
        labels.append(t[file])

    acc = accuracy_score(labels, predictions)
    print(acc)

if __name__ == '__main__':
    main()