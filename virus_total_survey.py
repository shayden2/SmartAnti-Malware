import os
import pandas as pd
import time
import signal
import vt

engines = {}

class Engine:
    def __init__(self, name):
        self.name = name
        self.correct_decisions = 0
        self.incorrect_decisions = 0
        self.unknown_decisions = 0

    def correct(self):
        self.correct_decisions = self.correct_decisions + 1

    def incorrect(self):
        self.incorrect_decisions = self.incorrect_decisions + 1

    def unknown(self):
        self.unknown_decisions = self.unknown_decisions + 1

    def write(self, fp):
        fp.write(f'Engine: {self.name}\n')
        fp.write(f'Correct Decisions: {self.correct_decisions}\n')
        fp.write(f'Incorrect Decisions: {self.incorrect_decisions}\n')
        fp.write(f'Unknown Decisions: {self.unknown_decisions}\n')
        fp.write(f'Correct Decision Percentage: {(self.correct_decisions/(self.correct_decisions+self.incorrect_decisions+self.unknown_decisions))*100:.2f}%\n\n')

def write_engines(fp):
    for engine in engines.values():
        engine.write(fp)

def increment_engine(name, decision):
    if name in engines.keys():
        engine = engines[name]
    else:
        engine = Engine(name)
        engines[name] = engine
    if decision == 1:
        engine.correct()
    elif decision == 0:
        engine.incorrect()
    elif decision == -1:
        engine.unknown()


class Result:
    def __init__(self, id, sha256, _list, client):
        self.id = id
        self.sha256 = sha256
        self.list = _list
        self.correct_engines = []
        self.incorrect_engines = []
        self.unknown_engines = []
        try:
            query = client.get_object("/files/" + sha256).last_analysis_results
        except vt.error.APIError:
            print('caught')
            _handler()
        for engine in query:
            data = query[engine]
            if data['category'].lower() == 'type-unsupported':
                continue
            elif data['category'].lower() == 'malicious' and _list.lower() == 'blacklist':
                self.correct_engines.append(engine)
                decision = 1
            elif data['category'].lower() == 'undetected' and _list.lower() == 'whitelist':
                self.correct_engines.append(engine)
                decision = 1
            elif data['category'].lower() == 'malicious' and _list.lower() == 'whitelist':
                self.incorrect_engines.append(engine)
                decision = 0
            elif data['category'].lower() == 'undetected' and _list.lower() == 'blacklist':
                self.incorrect_engines.append(engine)
                decision = 0
            else:
                self.unknown_engines.append(engine)
                decision = -1
            increment_engine(engine, decision)
    
    def write(self, fp, res):
        fp.write(f'ID: {self.id}\n')
        fp.write(f'\tSHA256: {self.sha256}\n')
        fp.write(f'\tList: {self.list}\n')
        fp.write(f'\tCorrectly categorized: {len(res.correct_engines)}\n')
        fp.write(f'\tIncorrectly categorized: {len(res.incorrect_engines)}\n')
        fp.write(f'\tUnable to categorize: {len(res.unknown_engines)}\n\n')


client = vt.Client('950e1057f624467f76a69595e09ad8fe75bb17415c3b2b803c816862bec92297')

df = pd.read_csv('./malware/train.csv')

files_output = open('files.txt', 'w')
engines_output = open('engines.txt', 'w')

def _handler():
    files_output.close()
    write_engines(engines_output)
    engines_output.close()
    client.close()
    print()
    exit()

signal.signal(signal.SIGINT, _handler)

begin_index = 0

for i in range(begin_index, 4000):
    row = df.iloc[i]
    if i % 10 == 0:
        print(f'Progress: {(i/200)*100:.2f}%')
    id = row['id']
    sha256 = row['sha256']
    _list = row['list']
    res = Result(id, sha256, _list, client)
    res.write(files_output, res)
    print(f'ID: {id}')
    print(f'List: {_list}')
    print(f'{len(res.correct_engines)} correctly categorized this file.')
    print(f'{len(res.incorrect_engines)} incorrectly categorized this file.')
    print(f'{len(res.unknown_engines)} were unable to categorize this file.')

    time.sleep(0.5)

write_engines(engines_output)

files_output.close()
engines_output.close()

client.close()