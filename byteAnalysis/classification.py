import numpy as np
import pandas as pd
import shutil
import os
import pickle
from itertools import chain, repeat, islice


""" Helper Functions """

def pad_infinite(iterable, padding=None):
   return chain(iterable, repeat(int(0)))

def pad(iterable, size, padding=None):
   return islice(pad_infinite(iterable, int(0)), size)


""" Preprocess Training Data """

df=pd.read_csv('../malware/train.csv',encoding = "utf-8")
x_train = []
y_train = []
maxX = 200000 

for fn in df['id'].values:
    if fn % 2 == 0:
        with open(f'../malware/train/{fn}',"rb") as f:
            data = f.read()
            print(f"Converting: {fn}")
            data = list(data) 
            if len(data) > maxX:
                x_train.append(data[:maxX])
            else: 
                x_train.append(list(pad(data, maxX, 0)))
            y_train.append(df.loc[df['id']==fn]['list'].item())

x_train = np.asarray(x_train, dtype=object)
y_train = np.asarray(y_train, dtype=object)


""" Preprocess Testing Data """

df=pd.read_csv('../malware/test.csv',encoding = "utf-8")
x_test = []
y_test = []

for fn in df['id'].values:
    if fn % 2 == 0:
        with open(f'../malware/test/{fn}',"rb") as f:
            data = f.read()
            print(f"Converting: {fn}")
            data = list(data)
            if len(data) > maxX:
                x_test.append(data[:maxX])
            else: 
                x_test.append(list(pad(data, maxX, 0)))
            y_test.append(df.loc[df['id']==fn]['list'].item())

x_test = np.asarray(x_test, dtype=object)
y_test = np.asarray(y_test, dtype=object)


""" Train Machine Learning Models on Bytes """

from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

####################################################
###### RANDOM FOREST CLASSIFIER: 71% Accuracy ######
####################################################

model = RandomForestClassifier(max_depth=10, random_state=0)
model.fit(x_train, y_train)

print(f"Random Forest Accuracy: {model.score(x_test, y_test)}")
print(model.predict([x_test[1]]))

filename = 'models/RFC.sav'
pickle.dump(model, open(filename, 'wb'))

####################################################
### SVM (decision tree) CLASSIFIER: 74% Accuracy ###
####################################################

model = DecisionTreeClassifier()
model.fit(x_train, y_train)

filename = 'models/SVM.sav'
pickle.dump(model, open(filename, 'wb'))

print(f"Decision Tree Accuracy: {model.score(x_test, y_test)}")
print(model.predict([x_test[1]]))

####################################################
########### MLP CLASSIFIER: 50% Accuracy ###########
####################################################

model = MLPClassifier(random_state=1, max_iter=300)
model.fit(x_train, y_train)

filename = 'models/MLP.sav'
pickle.dump(model, open(filename, 'wb'))

print(f"MLP Accuracy: {model.score(x_test, y_test)}")
print(model.predict([x_test[1]]))

### 50% Accuracy ###
