import numpy as np
import pandas as pd
import shutil
import os
import pickle
from itertools import chain, repeat, islice


""" Helper Functions """

def pad_infinite(iterable, padding=None):
   return chain(iterable, repeat(int(0)))

def pad(iterable, size, padding=None):
   return islice(pad_infinite(iterable, int(0)), size)


""" Preprocess Training Data """

df=pd.read_csv('../malware/train.csv',encoding = "utf-8")
X = []
y = []
maxX = 200000 

for fn in df['id'].values:
    if fn % 2 == 0:
        with open(f'../malware/train/{fn}',"rb") as f:
            data = f.read()
            data = list(data) 
            if len(data) > maxX:
                X.append(data[:maxX])
            else: 
                X.append(list(pad(data, maxX, 0)))
            y.append(df.loc[df['id']==fn]['list'].item())


""" Preprocess Testing Data """

df=pd.read_csv('../malware/test.csv',encoding = "utf-8")

for fn in df['id'].values:
    if fn % 2 == 0:
        with open(f'../malware/test/{fn}',"rb") as f:
            data = f.read()
            data = list(data)
            if len(data) > maxX:
                X.append(data[:maxX])
            else: 
                X.append(list(pad(data, maxX, 0)))
            y.append(df.loc[df['id']==fn]['list'].item())

X = np.asarray(X, dtype=object)
y = np.asarray(y, dtype=object)


""" Train Machine Learning Models on Bytes """

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn import metrics
import random

""" k-Fold Cross Validation (k=5) """

random.seed(1)
model = RandomForestClassifier(n_estimators=100, max_depth=20, random_state=0)
scores = cross_val_score(model, X, y, cv=5)
print(f'Mean: {scores.mean()}  Stdev: {scores.std()}')


############################################################
#################### Validation Results ####################
############################################################
""" Mean: 0.7796000000000001  Stdev: 0.01335065541462292 """
