import pandas as pd
import vt
from json import dump, load
from time import sleep

class Engine:
    def __init__(self, name, correct, incorrect, unknown):
        self.name = name
        self.correct_decisions = correct
        self.incorrect_decisions = incorrect
        self.unknown_decisions = unknown
        if correct != 0 or incorrect != 0:
            self.cdp = correct / (correct + incorrect)
        else:
            self.cdp = 0
        self.decisions = correct + incorrect

engines = {}
weights = {}

def read_engines():
    with open('engines.txt') as fp:
        while True:
            cur_pos = fp.tell()
            has_another_line = bool(fp.readline())
            if not has_another_line:
                break
            fp.seek(cur_pos)

            name = fp.readline().split(' ')[1].strip()
            correct = int(fp.readline().split(' ')[2].strip())
            incorrect = int(fp.readline().split(' ')[2].strip())
            unknown = int(fp.readline().split(' ')[2].strip())

            engine = Engine(name, correct, incorrect, unknown)
            engines[name] = engine
            weights[name] = int(engine.cdp * engine.decisions)

            fp.readline()
            fp.readline()

read_engines()

with open('results.json', 'r') as fp:
    results = load(fp)

def write_results():
    with open('results.json', 'w') as fp:
        r = dump(results, fp)

def _handler():
    write_results()
    decisions_output.close()
    client.close()
    exit()

weights = dict(sorted(weights.items(), key=lambda item: item[1], reverse=True))

# shayden2
# client = vt.Client('950e1057f624467f76a69595e09ad8fe75bb17415c3b2b803c816862bec92297')
# stuarthayden10
client = vt.Client('73e9f22987b8d49b8cc3d4b513e3d25ac95687f207154bc9514712d9832b0c07')

df = pd.read_csv('./malware/test.csv')
decisions_output = open('tests.txt', 'a')

begin_index = 831

for i in range(begin_index, 1000):
    op = 0
    row = df.iloc[i]
    id = row['id']
    sha256 = row['sha256']
    _list = row['list']
    try:
        analysis = client.get_object("/files/" + sha256).last_analysis_results
    except vt.error.APIError:
        print("\nQuota Exceeded")
        _handler()
    for engine in analysis:
        decision = analysis[engine]['category']
        if decision == 'malicious':
            op = op - weights[engine]
        elif decision == 'undetected' or decision == 'harmless':
            op = op + weights[engine]
    if op < 0:
        decisions_output.write(f'{id} - {_list}: MALICIOUS with score {op}\n')
        if _list.lower() == 'blacklist':
            results['num_correct'] = results['num_correct'] + 1
            results['correct'].append(str(id))
        elif _list.lower() == 'whitelist':
            results['num_incorrect'] = results['num_incorrect'] + 1
            results['incorrect'].append(str(id))
    elif op > 0:
        decisions_output.write(f'{id} - {_list}: UNDETECTED with score {op}\n')
        if _list.lower() == 'whitelist':
            results['num_correct'] = results['num_correct'] + 1
            results['correct'].append(str(id))
        elif _list.lower() == 'blacklist':
            results['num_incorrect'] = results['num_incorrect'] + 1
            results['incorrect'].append(str(id))
    else:
        decisions_output.write(f'{id} - {_list}: UNKNOWN with score {op}\n')
        results['num_unknown'] = results['num_unknown'] + 1
        results['unknown'].append(str(id))
    print(f'{i+1}/1000')    
    sleep(0.5)

_handler()
